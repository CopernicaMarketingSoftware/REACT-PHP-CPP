/**
 *	Connection.h
 *
 *	Class representing a connection to a MySQL daemon
 *
 *	@copyright 2014 Copernica BV
 */
 
/**
 *  Dependencies
 */
#include <phpcpp.h>
#include <reactcpp.h>
#include <reactcpp/mysql.h>

/**
 * Set up namespace
 */
namespace ReactPhp {
	
/**
 * Class definition
 */
class Connection : public Php::Base
{
private:
	/**
	 *  The actual connection object
	 *  @var	std::shared_ptr
	 */
	std::shared_ptr<React::MySQL::Connection> _connection;
	
public:
	/**
	 *  Constructor
	 */
	Connection() {}
	
	/**
	 *  Pass in an existing connection
	 *  @var	React::MySQL::Connection
	 */
	Connection(const std::shared_ptr<React::MySQL::Connection> &connection) : _connection(connection) {}
	
	/**
	 *  Destructor
	 */
	virtual ~Connection() {}
	
	/**
	 *  Get access to the internal connection object that is wrapped
	 *  by this PHP connection class
	 *  @return	React::MySQL::Connection
	 */
	React::MySQL::Connection *conn()
	{
		React::MySQL::Connection *_conn = _connection.get();
		
		return _conn;
	}
	
	/**
	 * Establish a connection to mysql
	 *
	 * @param loop 	the loop to bind to
	 * @param hostname the hostname to connect to
	 * @param username the username to login with
	 * @param password the password to authenticate with
	 * @param database the database to use
	 * @param callback the callback to inform once the connection is established or failed
	 */
	void __construct(Php::Parameters &params);
	
	/**
	 * Parse the string and replace all placeholders with
	 * the provided values.
	 *
	 * The callback is executed with the result.
	 *
	 * @param query the query to parse
	 * @param callback the callback to give the result
	 * @param parameters placeholder values
	 * @param count number of placeholder values
	 */
	 void prepare(Php::Parameters &params);
	
	/**
	 * Execute a query
	 *
	 * @param query	the query to execute
	 * @param callback	the callback to inform for all the result sets generated by the query
	 */
	void query(Php::Parameters &parameters);
	
};

/**
 * End of namespace
 */
}
